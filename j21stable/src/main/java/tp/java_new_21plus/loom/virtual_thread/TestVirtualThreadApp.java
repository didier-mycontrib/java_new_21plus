package tp.java_new_21plus.loom.virtual_thread;

import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import java.util.stream.IntStream;

public class TestVirtualThreadApp {
	

	public static void testSimpleVirtualThread() throws Exception {
		Thread vt1 = Thread.ofVirtual().name("vt1")
				         .unstarted(MyRunnableUtil.prepareCoffeeRunnable());
		vt1.start();// démarrage de vt1
		vt1.join();//attente de la fin de vt1 depuis main Thread
	}
	
	public static void testViaExecutors() throws Exception {
		//one unamed virtualThread for each concurrent task submitted to the executor
		//try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {
		
		//one named virtualThread (generated by factory) for each concurrent task submitted to the executor
		final ThreadFactory virtualThreadFactory = Thread.ofVirtual().name("routine-", 0).factory();
		//names of virtual threads will be "routine-0" , "routine-1" , ...
		try (var executor = Executors.newThreadPerTaskExecutor(virtualThreadFactory)) {
			Future<?> f1 = executor.submit(MyRunnableUtil.prepareJokeRunnable());
			Future<?> f2 = executor.submit(MyRunnableUtil.prepareCoffeeRunnable());
			
			Future<Integer> f3 = executor.submit(MyRunnableUtil.longComputationCallable());
			f1.get();// attente fin de f1
			f2.get();// attente fin de 
			Integer resF3 = f3.get();// attente resultat de f3
			System.out.println("resF3="+resF3);
		}
	}
	
	
	public static void testViaExecutorsAndWaitingForAll() throws Exception {
		//one unamed virtualThread for each concurrent task submitted to the executor
		try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {
			executor.submit(MyRunnableUtil.prepareJokeRunnable());
			for(int i=0;i<3;i++) {
				executor.submit(MyRunnableUtil.prepareJokeRunnable());
			}
			executor.shutdown();//action différée lorsque tout sera fini
			System.out.println("suite");
			try {
				  executor.awaitTermination(60, TimeUnit.SECONDS);  //temps d'attente maxi (timeout)
				} catch (InterruptedException e) {
				  System.err.println(e.getMessage());
				}
			System.out.println("fin");
		}
	}
	
	public static void testToViewCarrierThreadPoolSize() throws Exception {
		final ThreadFactory virtualThreadFactory = Thread.ofVirtual().name("routine-", 0).factory();
		try (var executor = Executors.newThreadPerTaskExecutor(virtualThreadFactory)) {
			IntStream.range(0, numberOfCores() + 1)
	        .forEach(i -> executor.submit(MyRunnableUtil.prepareBasicRunnable()));
		}
		//VirtualThread[#37,routine-8]/runnable@ForkJoinPool-1-worker-4
		//            [#virtualThreadId,virtualThreadName]/.... carrierPlatformThread
	}
	
	public static int numberOfCores() {
		return Runtime.getRuntime().availableProcessors();
	}
	
	public static void main(String[] args) throws Exception {
		System.out.println("number of cores in processor=" + numberOfCores());
		//testSimpleVirtualThread();
		//testViaExecutors();
		//testToViewCarrierThreadPoolSize();
		testViaExecutorsAndWaitingForAll();
	}

}
